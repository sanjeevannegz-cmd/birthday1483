/* firstly main folder(project) - BIRTHDAY-SITE
inside it , first there is folder - .next
second folder - node modules
third folder - pages - inside it - 
firstly _app.js is there -
import '../styles/index.css';
import '../styles/gallery.css';
import '../styles/stars.css';
import { useEffect, useRef } from 'react';

export default function App({ Component, pageProps }) {
  const audioRef = useRef(null);

  useEffect(() => {
    const audio = audioRef.current;
    if (audio) {
      audio.volume = 0.2; // Set volume lower (range is 0.0 to 1.0)

      const playAudio = () => {
        audio.play().catch((e) => {
          console.log("Autoplay blocked. Waiting for user interaction.");
        });
      };

      playAudio();

      const onUserGesture = () => {
        playAudio();
        document.removeEventListener('click', onUserGesture);
        document.removeEventListener('keydown', onUserGesture);
      };

      document.addEventListener('click', onUserGesture);
      document.addEventListener('keydown', onUserGesture);
    }
  }, []);

  return (
    <>
      <audio ref={audioRef} src="/background-music.mp3" loop autoPlay />
      <Component {...pageProps} />
    </>
  );
}

then second gallary.js - 
import React, { useEffect, useState } from 'react';

const images = [
  '/aprajita1.jpg',
  '/aprajita2.jpg',
  '/aprajita3.jpg',
  '/aprajita4.jpg',
  '/aprajita5.jpg',
  '/aprajita6.jpg',
];

export default function Gallery() {
  const [showRotation, setShowRotation] = useState(false);

  useEffect(() => {
    const entryDuration = 1000;
    const timer = setTimeout(() => {
      setShowRotation(true);
    }, entryDuration);
    return () => clearTimeout(timer);
  }, []);

  return (
    <div className="gallery-wrapper">
      <div className="balloons">
        <div className="balloon red" />
        <div className="balloon blue" />
        <div className="balloon green" />
        <div className="balloon yellow" />
        <div className="balloon purple" />
        <div className="balloon pink" />
        <div className="balloon cyan" />
        <div className="balloon orange" />
        <div className="balloon white" />
        <div className="balloon lime" />
      </div>
      <div className="background-text">üéâ Happy Birthday Aprajita üéâ</div>
      <h1 className="gallery-title">A journey through your smiles üåà</h1>
      <div className={`carousel entry ${showRotation ? 'show-rotation' : ''}`}>
        <div className="carousel-track">
          {images.map((src, index) => (
            <div key={index} className="carousel-item">
              <img src={src} alt={`Gallery ${index + 1}`} />
            </div>
          ))}
        </div>
      </div>
      <div className="ahri-dialogue">
        <img src="/ahri.png" alt="Ahri" className="ahri-image" />
        <div className="dialogue">
          Every picture tells a story of your light üíñ
        </div>
      </div>
    </div>
  );
}

then third index.js -
import React from 'react';
import Link from 'next/link';

export default function Home() {
  return (
    <div className="container">
      <img src="/ahri.png" alt="Ahri" className="ahri" />
      <h1 className="title">Happy Birthday Aprajita! üéâ</h1>
      <p className="message">
        You light up every room you walk into ‚ú®<br />
        Let this day be as amazing as your smile!
      </p>

      <Link href="/stars">
        <button className="next-btn">Next ‚û°Ô∏è</button>
      </Link>
    </div>
  );
}

star.js - 
import React, { useRef, useEffect } from 'react';
import Link from 'next/link';
import * as THREE from 'three';

// NOTE: This is a placeholder for your custom StarryText component.
// You will need to create and export this component in `../components/StarryText.js`.
const StarryText = ({ text }) => {
  return <h1 className="starry-text">{text}</h1>;
};

// Function to generate a procedural moon texture
const createMoonTexture = () => {
  const size = 1024;
  const canvas = document.createElement('canvas');
  canvas.width = size;
  canvas.height = size;
  const ctx = canvas.getContext('2d');
  
  // Fill with a base gray color
  ctx.fillStyle = '#b0b0b0';
  ctx.fillRect(0, 0, size, size);
  
  // Draw random circles to simulate craters
  for (let i = 0; i < 200; i++) {
    const x = Math.random() * size;
    const y = Math.random() * size;
    const radius = Math.random() * 50 + 5;
    const darkness = Math.random() * 0.3 + 0.1;
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.fillStyle = `rgba(0, 0, 0, ${darkness})`;
    ctx.fill();
  }

  // Add some larger, darker splotches (maria)
  for (let i = 0; i < 15; i++) {
    const x = Math.random() * size;
    const y = Math.random() * size;
    const radius = Math.random() * 100 + 30;
    const darkness = Math.random() * 0.2 + 0.2;
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.fillStyle = `rgba(0, 0, 0, ${darkness})`;
    ctx.fill();
  }
  
  return new THREE.CanvasTexture(canvas);
};

export default function Stars() {
  const canvasRef = useRef(null);
  const moonContainerRef = useRef(null);
  const animationFrameId = useRef(null);

  // Use a separate useEffect for the 2D canvas stars
  useEffect(() => {
    if (typeof window === 'undefined') return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    class Star {
      constructor(x, y, radius, color) {
        this.x = x;
        this.y = y;
        this.radius = radius;
        this.color = color;
        this.alpha = 0;
        this.twinkleSpeed = Math.random() * 0.02 + 0.005; 
        this.twinkleDirection = Math.random() > 0.5 ? 1 : -1;
      }

      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
        ctx.fillStyle = `rgba(${this.color}, ${this.alpha})`;
        ctx.fill();
        ctx.closePath();
      }

      twinkle() {
        this.alpha += this.twinkleSpeed * this.twinkleDirection;
        if (this.alpha <= 0 || this.alpha >= 1) {
          this.twinkleDirection *= -1;
        }
      }
    }

    const backgroundStars = [];
    const numBackgroundStars = 500;
    for (let i = 0; i < numBackgroundStars; i++) {
      const x = Math.random() * canvas.width;
      const y = Math.random() * canvas.height;
      const radius = Math.random() * 1.5 + 0.5;
      const color = '255, 255, 255';
      backgroundStars.push(new Star(x, y, radius, color));
    }

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      backgroundStars.forEach(star => {
        const speed = star.radius * 2;
        star.x -= speed;  
        if (star.x < 0) {
          star.x = canvas.width;
        }
        star.twinkle();
        star.draw();
      });
      animationFrameId.current = requestAnimationFrame(animate);
    };

    animate();

    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationFrameId.current);
    };
  }, []);

  // Use a separate useEffect for the 3D Three.js moon
  useEffect(() => {
    if (typeof window === 'undefined' || !moonContainerRef.current) return;

    const container = moonContainerRef.current;
    
    // SCENE, CAMERA, RENDERER
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    container.appendChild(renderer.domElement);

    // LIGHTING
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(5, 5, 5);
    scene.add(directionalLight);

    // MOON MODEL with procedural texture
    const moonTexture = createMoonTexture();
    const moonGeometry = new THREE.SphereGeometry(2.5, 64, 64);
    const moonMaterial = new THREE.MeshStandardMaterial({
      map: moonTexture
    });
    const moon = new THREE.Mesh(moonGeometry, moonMaterial);
    moon.position.set(0, 0, -5);
    scene.add(moon);

    // ANIMATION
    const animate = () => {
      requestAnimationFrame(animate);
      if (moon) {
        moon.rotation.y += 0.005;
      }
      renderer.render(scene, camera);
    };

    animate();

    // RESPONSIVENESS
    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
      if (container && renderer.domElement) {
        container.removeChild(renderer.domElement);
      }
    };
  }, []);


  return (
    <>
      <style jsx global>{`
        html, body {
          margin: 0;
          padding: 0;
          overflow: hidden;
          background-color: #0d1117;
          color: #ffffff;
          font-family: 'Arial', sans-serif;
          height: 100vh;
        }

        .starry-sky-page {
          position: relative;
          width: 100vw;
          height: 100vh;
        }

        .starry-canvas {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          z-index: 1;
        }

        .moon-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
        }

        .ahri-dialogue {
          position: absolute;
          left: 50%;
          transform: translateX(-50%);
          display: flex;
          align-items: center;
          gap: 20px;
          z-index: 3;
          width: 80%;
          max-width: 600px;
          color: #ffffff;
        }

        .ahri-dialogue.top {
          top: 10%;
          flex-direction: column;
          text-align: center;
        }

        .ahri-dialogue.bottom {
          bottom: 10%;
          flex-direction: column;
          text-align: center;
        }

        .ahri-image {
          width: 150px;
          height: auto;
          filter: drop-shadow(0 0 10px #ff66aa);
        }

        .dialogue {
          background: rgba(255, 255, 255, 0.1);
          padding: 15px 25px;
          border-radius: 25px;
          border: 1px solid rgba(255, 255, 255, 0.3);
          backdrop-filter: blur(10px);
          font-size: 1.2rem;
          line-height: 1.6;
          box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);
          animation: fadeIn 2s ease-in-out;
        }

        .next-btn {
          margin-top: 20px;
          padding: 10px 20px;
          font-size: 1rem;
          font-weight: bold;
          border: none;
          border-radius: 20px;
          background-color: #ff66aa;
          color: #ffffff;
          cursor: pointer;
          transition: background-color 0.3s ease;
        }

        .next-btn:hover {
          background-color: #e05c93;
        }
        
        .starry-text {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-size: clamp(2rem, 10vw, 5rem);
            font-weight: bold;
            text-align: center;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 3;
            text-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #f66, 0 0 40px #f66;
            animation: textGlow 1.5s ease-in-out infinite alternate;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes textGlow {
            from { text-shadow: 0 0 10px #fff, 0 0 20px #fff; }
            to { text-shadow: 0 0 20px #fff, 0 0 30px #fff, 0 0 40px #f66, 0 0 50px #f66; }
        }
      `}</style>
      <div className="starry-sky starry-sky-page">
        <canvas ref={canvasRef} className="starry-canvas"></canvas>
        <div ref={moonContainerRef} className="moon-container"></div>
        <StarryText text="HAPPY BIRTHDAY APRAJITA" />
        <div className="ahri-dialogue top">
          <img src="/ahri.png" alt="Ahri" className="ahri-image" />
          <div className="dialogue">
            The stars have aligned for you, Aprajita! ‚ú®
          </div>
        </div>
        <div className="ahri-dialogue bottom">
          <div className="dialogue">
            Ready for the next surprise?
          </div>
          <Link href="/gallery">
            <button className="next-btn">Next ‚û°Ô∏è</button>
          </Link>
        </div>
      </div>
    </>
  );
}

this folder has this
Next folder - public - 
first there is six images - aprajita1.jpg, aprajita2.jpg ,etc 
then ahri.png
then background-music.mp3
and then some vng files like vercel.vng etc
this is all in this folder(public)
Next folder in main folder is - styles - 
gallery.css - 
body {
  margin: 0;
  font-family: 'Segoe UI', sans-serif;
  color: #fff;
  overflow: hidden;
  height: 100vh;
}

.starry-sky-page {
  background-color: #000;
}

.starry-sky {
  position: relative;
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  transition: opacity 1s ease-in-out;
}

.star {
  position: absolute;
  width: 2px;
  height: 2px;
  background: transparent;
  animation: twinkle 7s infinite;
}

.star::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) rotate(45deg);
  width: 2px;
  height: 2px;
  background-color: var(--star-color);
  box-shadow: 0 0 calc(1.5px * var(--star-brightness)) calc(0.75px * var(--star-brightness)) rgba(255, 255, 255, 0.6),
              0 0 calc(4px * var(--star-brightness)) calc(2px * var(--star-brightness)) rgba(255, 255, 255, 0.3);
}

.star::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) rotate(0deg);
  width: 2px;
  height: 2px;
  background-color: var(--star-color);
  box-shadow: 0 0 calc(1.5px * var(--star-brightness)) calc(0.75px * var(--star-brightness)) rgba(255, 255, 255, 0.6),
              0 0 calc(4px * var(--star-brightness)) calc(2px * var(--star-brightness)) rgba(255, 255, 255, 0.3);
}

/* Twinkle animation now uses the brightness variable */
@keyframes twinkle {
  0% { opacity: calc(0.2 * var(--star-brightness)); }
  14% { opacity: calc(0.6 * var(--star-brightness)); }
  28% { opacity: calc(0.5 * var(--star-brightness)); }
  42% { opacity: calc(0.8 * var(--star-brightness)); }
  56% { opacity: calc(0.6 * var(--star-brightness)); }
  70% { opacity: calc(0.7 * var(--star-brightness)); }
  84% { opacity: calc(0.6 * var(--star-brightness)); }
  100% { opacity: calc(0.2 * var(--star-brightness)); }
}

.stars-message {
  position: relative;
  margin-top: -70px;
  transform-style: preserve-3d;
  perspective: 1000px;
}

/* New CSS to make the name appear as a window to the stars */
.name-in-stars {
  font-family: 'Starry', sans-serif;
  font-size: 9rem;
  letter-spacing: 1.2rem;
  color: transparent;
  -webkit-background-clip: text;
  background-clip: text;
  background-color: #fff;
  background-image: linear-gradient(135deg, #fce788, #ffffff, #fff);
  background-size: 200% 200%;
  animation: backgroundMove 10s linear infinite;
  text-shadow: 0 0 10px rgba(255, 255, 255, 0.3); /* Soft, subtle glow for depth */
}

@keyframes backgroundMove {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

@keyframes floatRotate {
  0% {
    transform: rotateX(0deg) rotateY(0deg) translateY(0);
  }
  100% {
    transform: rotateX(3deg) rotateY(-3deg) translateY(-5px);
  }
}

.ahri-dialogue.top {
  position: absolute;
  top: 2rem;
  right: 2rem;
  display: flex;
  align-items: center;
  gap: 10px;
}

.ahri-dialogue.bottom {
  position: absolute;
  bottom: 3rem;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

.ahri-image {
  width: 70px;
  height: auto;
}

.dialogue {
  background: rgba(255, 255, 255, 0.1);
  color: #fff;
  padding: 10px 15px;
  border-radius: 15px;
  max-width: 300px;
  font-size: 1rem;
}

.next-btn {
  padding: 1rem 2rem;
  font-size: 1.2rem;
  border: none;
  background-color: #ff69b4;
  color: white;
  border-radius: 10px;
  cursor: pointer;
  transition: background 0.3s ease;
  margin-top: 1.5rem;
}

.next-btn:hover {
  background-color: #ff1493;
}

/* Responsive adjustments */
@media (max-width: 480px) {
  .name-in-stars {
    font-size: 7rem;
    letter-spacing: 0.8rem;
  }
  .ahri-image {
    width: 60px;
  }
  .dialogue {
    font-size: 0.9rem;
  }
  .next-btn {
    font-size: 1.1rem;
    padding: 0.8rem 1.5rem;
  }
}

also index.css is there -
.container {
  background: linear-gradient(to bottom right, #ff9a9e, #fad0c4);
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  padding: 2rem;
  position: relative;
}

.ahri {
  position: absolute;
  left: 1rem;
  bottom: 1rem;
  height: 140px;
}

.title {
  font-size: 3rem;
  color: #fff;
  text-shadow: 2px 2px #000;
  margin-bottom: 1rem;
}

.message {
  font-size: 1.3rem;
  color: #fff;
  max-width: 600px;
  margin-bottom: 3rem;
  text-shadow: 1px 1px #000;
}

.next-btn {
  padding: 0.8rem 1.5rem;
  font-size: 1rem;
  border: none;
  background-color: #ff69b4;
  color: white;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.next-btn:hover {
  background-color: #ff1493;
}

stars.css - 
/* Other styles */

/* Starry Text Container */
.starry-text-container {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: auto;
  height: auto;
  z-index: 10;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

and then there are some other files like package.json, package-lock.json, etc
Here we are making something in three levels - 
Level 1: Basic Birthday Site (Static Version)
üéØ Goal: Have a clean, working, single-page website that plays music, shows intro, and has 2‚Äì3 interactive features.
üõ†Ô∏è Features:

üéµ Background music (manual upload)

ü¶ä Ahri Welcome message with ‚ÄúNext‚Äù button

üåü Starry sky with "Aprajita" in stars

üéÇ 3D photo gallery (use a library like react-photo-gallery or three.js cube)

üéâ Final goodbye message

üí¨ Prompt:

"Build a React or Next.js site with a birthday greeting flow. Include a starry background, a 3D photo gallery of a person named Aprajita Chauhan, and background music that autoplays. The site should be interactive but simple, with a single page and scroll or 'Next' button navigation."

üü° Level 2: Interactive Experience (Full Core Flow)
üéØ Goal: Add all interactive elements guided by Ahri, create full linear experience with animations.
üõ†Ô∏è Features:

Everything from Level 1, plus:

üß† Ahri guide between steps (with avatar + message text box)

üí¨ Compliment Rain (CSS animation with keyframe drops)

üßÅ Cards with English & Hindi wishes (flip animation)

üå∏ Flower guessing game with input validation

üê∞ Bunny mascot with audio (click to activate)

üí¨ Prompt:

"Create a multi-step interactive birthday website using Next.js. The character Ahri (from League of Legends) acts as a narrator. Include custom steps: starry background with name, compliment rain animation, card flip wishes in Hindi and English, a flower guessing game, and a bunny mascot that plays a birthday song. All steps should be animated with transitions, and music should play in the background. Deploy-ready for Vercel."

üî¥ Level 3: Personalized, Polished, Shareable Product
üéØ Goal: Make it feel like a gift-level experience ‚Äî beautiful, polished, responsive, and easily shareable.
üõ†Ô∏è Features:

Everything from Level 2, plus:

üí¨ Form to submit Aprajita‚Äôs song/movie suggestion (store in Firebase or send to webhook/email)

ü™Ñ Magical transitions between sections (Framer Motion)

üñºÔ∏è Styled layout with animations and effects (TailwindCSS + parallax or Lottie)

üéÅ Fake cake-cutting or candle-blowing interaction

üì± Mobile-first responsive design

üîó Share button (generate custom URL to reopen page)

üí¨ Prompt:

"Build a beautiful, responsive birthday web app in Next.js featuring a League of Legends theme guided by Ahri. The site includes interactive steps like 3D photo gallery, starry name background, compliment rain, card wishes, flower guessing, and form submission. Use TailwindCSS, Framer Motion, and audio/video support. Include a custom animated bunny mascot and make it mobile-friendly. Final version should be Vercel-deployable and feel like a digital gift."

üîö Summary Table
Level	Scope	Tech	Prompt Type
Level 1	Static + Music + Gallery	Next.js + CSS	Starter project
Level 2	Full Interactive Flow	Next.js + Tailwind + JS	Core experience
Level 3	Polished, Gift-ready	Next.js + Tailwind + Framer Motion + Audio	Final product
we are in middle of level 1 now

Rule to follow - 
Your Non-Negotiable Rules:

‚ùå No downloadable files ‚Äî Never offer or generate a downloadable document.

‚ùå Do not change the carousel frame size without reason (Rule now retired, acknowledged).

üö´ Do not make ‚ÄúHappy Birthday Aprajita‚Äù bigger than the image frame.

‚úÖ Everything must stay fully responsive across screen sizes.

No margin in bottom of gallery page in different tabs, mobile or laptop

üß† Never break Rule #1: Make minimal changes ONLY as needed ‚Äî do not alter working parts or designs.

üñº ‚ÄúHappy Birthday Aprajita‚Äù text must fully utilize available space within the image frame ‚Äî not too small, not larger than the frame.

üì± Laptop and mobile versions should be treated separately if needed, to achieve full responsiveness.

‚úÖ Always provide the full updated file content (Rule 2).*/